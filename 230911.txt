2023-09-11 2주차 수업필기
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main() {

}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

c에서 1은 참
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int get_integer() {
	int value;
	printf("정수 입력 : ");
	scanf("%d", &value);
	return value;
}

int is_prime(int n) {	//수정 : 1보다 작거나 같은 정수는 소수 아님
	int i;
	if (n <= 1)
		return 0;
	for (i = 2; i < n; i++)
		if (n % i == 0)
			return 0; //소수 아님
	return 1;		 //소수
}
int main() {
	int n;
	n = get_integer();
	

	if (is_prime(n)) // if(is_prime(n)==1)과 동일
		printf("%d 소수\n",n);
	else
		printf("%d 소수아님\n",n);


}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h> //sqrt 함수

int get_integer() {
	int value;
	printf("정수 입력 : ");
	scanf("%d", &value);
	return value;
}

int is_prime(int n) {	//수정 : 1보다 작거나 같은 정수는 소수 아님
	int i;
	if (n <= 1)
		return 0;
	for (i = 2; i < sqrt(n); i++)
		if (n % i == 0)
			return 0; //소수 아님
	return 1;		 //소수
}
int main() {
	int n;
	n = get_integer();
	

	if (is_prime(n)) // if(is_prime(n)==1)과 동일
		printf("%d 소수\n",n);
	else
		printf("%d 소수아님\n",n);


}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h> //printf,scanf 등 함수의 원형(protype)
#include <math.h> // sqrt 등 함수의 원형
#include <stdlib.h> //rand,srand 함수의 원형
#include <time.h>

//337
int main() {
	srand(time(0));//rand 호출 전 한 번만 호출
	//실행 시 마다 seed 값 변경이 필요 => 현재시간(초)
	for (int i = 0; i < 6; i++)
		printf("%d ", rand()%45 +1);
	// 0 < rand() <= 32767
	printf("\n");
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
342쪽에 수학함수 (math. h) 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

//p.361 (7) 반올림 함수 int my_round(double f)작성하고 테스트
//힌트 : (int)(f+0.5)
//실수 입력 : 3.14
//반올림값 = 3
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


int my_round(double f) {
	return (int)(f + 0.5); 
}

int main() {
	double d;
	printf("실수를 입력하시오 : ");
	scanf("%lf", &d);  //double은 %lf
	printf("반올림 값 = %d\n", my_round(d));

	return 0;
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>
//p362 (13)
//두점 사이의 거리를 반환하는
//double get_distance(double x1,double y1,double x2, double y2) 
//main함수에서 두점의 좌표를 입력받아 테스트

double get_distance(double x1, double y1, double x2, double y2) {
	return sqrt((x1 - x2) * (x1-x2) + (y1 - y2) * (y1 - y2));


} 
int main() {
	double x1, x2, y1, y2;
	printf("첫 번째 점의 좌표를 입력하시오 : ");
	scanf("%lf %lf", &x1, &y1);
	printf("첫 번째 점의 좌표를 입력하시오 : ");
	scanf("%lf %lf", &x2, &y2);

	
	printf("두 점 사이의 거리는 %lf 입니다.", get_distance(x1, y1, x2, y2));
	

}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


// 두 정수의 평균값(정수(반올림 생각 ㄴ) + 추가로 실수로 변경했음)을 반환하는 함수
//double average(int a, int b) 작성
//main 함수에서 두 정수를 입력받아 테스트

int get_integer() {
	int a, b = 0;
	return a, b;
}

double average(int a, int b) {
	return (double)(a + b) / 2;
	// return (a+b)/2.0;  
== 형 변환(type casting)
}


int main() {
	int a = get_integer();
	int b = get_integer();
	
	
	printf("두 정수를 입력하세요 : "); 
	scanf("%d %d", &a, &b);
	printf("평균 = %.2lf\n", (double)average(a, b));

}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
추가 설명:)
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


// 두 정수의 평균값(정수(반올림 생각 ㄴ))을 반환하는 함수
//double average(int a, int b) 작성
//main 함수에서 두 정수를 입력받아 테스트

int get_integer() {
	int a, b = 0;
	return a, b;
}

double average(int a, int b); // 함수 원형(prototype) 
// 컴파일러한테 이렇게 생겨먹은걸 알려준거고 함수 정의부분은 뒤에 나올거야
//밑에 있어도 되고 먼저 컴파일러 해도 되고 다른 파일에 있어도 되고 

int main() {
	int a = get_integer();
	int b = get_integer();
	
	
	printf("두 정수를 입력하세요 : "); 
	scanf("%d %d", &a, &b);
	printf("평균 = %.2lf\n", (double)average(a, b));

}
double average(int a, int b) {
	return (double)(a + b) / 2;
	//return (a+b)/2.0;
}


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

9장에 이론문제 나올 가능성 높음
지역변수 관해서 

지역변수는 블록 안에서만 선언된 변수. , 블록 안에서만 유효한 변수.
블록? 중괄호를 뜻함
지역변수의 초기값을 정해주지 않으면 쓰레기값이 들어가있음.


#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
//p.369
int main() 
{
	int i;
	int temp = 1;
	//지역변수(local variable)

	for (i = 0; i < 5; i++) 
	{
		/*int temp = 1;*/ // 지역변수 (local variable)
		printf("temp = %d\n", temp);
		temp++; // temp = temp +1
	}
	return 0;
}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
//p. 370 함수의 매개변수
매개 변수란? ************시험에 나와 이론***************
- 예시 생각해두기 미리 작성하는 연습하기


int add(int x, int y) { //x,y는  매개변수 // 녹즙기 입구 이름
	return x + y;
}
//여러번 사용하려고 만든거 

int main() {
	int a = 1, b = 2, c;
	c = add(a, b); // 함수 호출, a, b는 인수 
// a,b는 녹즙기 입구에 실제로 넣을 것 그걸 인수라고 해

함수 호출을 할때 어떻게 되는지 자세하게 설명하거라

중요한 키워드 : 값
인수의 값이 해당 매개변수로 복사가 된다.
값에 의한 호출

인수의 !!!!!!!!!값!!!!!!!!!!!!을 매개변수로 복사된다.
함수를 호출할때 인수의 값이 매개변수로 복사한다
"값에 의한 호출"(call by value) ==(pass by value)


}
//

녹즙기에 여기저기라고 하면 헷갈리잖아 
입구의 이름을 헷가리지 말라고 x, y 이런식으로 만들어놓은거야
입구 이름을 지으시면 됩니다. 이건 맘대로 지어도 돼
근데 입구에 들어갈 수 잇는 종류가 있을 거 아니야?
들어갈 수 잇는 입구의 종류를 정해주는거야
int , double 이런식으로
우리는 이걸 이제 유식하게 매개변수라고 해
함수를 호출할때 어떤 일이 일어나냐
시험 100프로 낸다 !!!!!!!!!!!!!!!!!!!!!!

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
//p.370

//int add(int x, int y) { //x,y도 매개변수
//	return x + y;
//}
//
//int main() {
//	int a = 1, b = 2, c;
//	c = add(a, b);
//}

void inc(int counter) {
	//counter는 매개변수, counter도 그릇
	// counter 라는 값도 10들어가 있어
	// i 그릇이랑 coutner 그릇은 서로 아예 다른 그릇임
	//호출할 때 값만 복사해줬지 원본이 훼손되지 않아
	//void 라는 것은 출구가 없는 함수야 (반환값이 없는 함수)
	counter++;
}
int main() {
	int i = 10;

	printf("호출 전 i = %d\n", i);
	inc(i);
	printf("호출 후 i = %d\n", i);
	return 0;
}
//void inc(int counter) {
//	counter++;
//}


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
//p.371
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int a, b;

int add() {
	return a + b;

}

int main() {
	int answer;
	a = 5;
	b = 7;
//만약 a,b에 값을 안준다면 자동으로 0으로 초기화 되니까 값도 0으로 나올것임

	answer = add();
	printf("%d + %d = %d\n", a, b, answer);
}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
전역변수는 어떻게 선언하느냐 ?

ㄴ 아무 블록에도 속하지 않는다.
함수외부라고 되어있는데
함수도 블록이 있으니까 
어느 곳에 속하지 않는 그냥 바깥에 있는
그래서 외부변수라고 불리기도 함.

지역변수의 범위는 함수나 블록으로 제한되는 반면, 전역변수는 소스파일 전체.
같은 프로그램 안에서 접근이 다 가능한.

전역변수를 초기화 하지않으면 자동으로 0으로 초기화
(지역변수랑 차이점 : 지역변수는 초기화 안하면 쓰레기값이 있는데 전역변수는 자동으로 0으로 초기화 됨)

생존기간은 프로그램 시작과 끝까지 메모리에 존재함.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
범위 (Scope) : 변수가 사용가능한 범위
- 지역변수 : 블록 안에서만 사용 가능
-전역변수 : 아무데서나 새용 가능

생존시간 : 변수가 메모리상에서 얼마나 오랫동안 존재하는지
- 지역변수 : 블록안에서만 생존하고 그 밖에선 사라짐
-전역변수 :프로그램 시작때부터 끝까지 


지역변수 : 블록 안에서 정의되는 변수 해당 블록 안에서만 사용 가능
시스템 스택이라 불리는 메모리 공간에 만들어짐.
전역변수 : 함수 외부에서 선언되는 변수. 소스파일 ,같은 한 프로그램 아에서 사용 가능하다



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
//p.371 (추가 설명) 
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int a, b;

int add() {
	return a + b;

}

int main() {
	int answer;
	int a; // 지역변수(local variable)

	a = 5;  // 내 가까이 잇는게 중요한거임 이렇게 되면 지역변수가 될것이다
	//결과가 이제 5+7=7 (이제 전역변수가 생각하기엔 0+7=7)
	b = 7;
	//만약 a,b에 값을 안준다면 자동으로 0으로 초기화 되니까 값도 0으로 나올것임


	answer = add();
	printf("%d + %d = %d\n", a, b, answer);

}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
다음 시간엔 375 static 지정자에 대해 배울것임.

